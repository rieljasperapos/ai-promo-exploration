import { Embeddings, type EmbeddingsParams } from "@langchain/core/embeddings";
import { AtlasUser } from "@nomic-ai/atlas";
export type EmbeddingTaskType = "search_query" | "search_document" | "clustering" | "classification";
/**
 * Interface for NomicEmbeddings parameters. Extends EmbeddingsParams and
 * defines additional parameters specific to the NomicEmbeddings class.
 */
export interface NomicEmbeddingsParams extends EmbeddingsParams {
    /**
     * The API key to use.
     * @default {process.env.NOMIC_API_KEY}
     */
    apiKey?: string;
    /**
     * The name of the model to use.
     * Alias for `model`
     * @default {"nomic-embed-text-v1"}
     */
    modelName?: string;
    /**
     * The name of the model to use.
     * @default {"nomic-embed-text-v1"}
     */
    model?: string;
    /**
     * The task your embeddings should be specialized for:
     * search_query, search_document, clustering, classification.
     * @default {"search_document"}
     */
    taskType?: EmbeddingTaskType;
    /**
     * The maximum number of documents to embed in a single request.
     * @default {400}
     */
    batchSize?: number;
    /**
     * Whether to strip new lines from the input text. This is recommended,
     * but may not be suitable for all use cases.
     * @default {true}
     */
    stripNewLines?: boolean;
    /**
     * The output size of the embedding model. Applicable only to models
     * that support variable dimensionality and defaults to the models
     * largest embedding size.
     */
    dimensionality?: number;
}
export interface NomicEmbeddingsResult {
    embeddings: Array<number[]>;
    usage: {
        total_tokens: number;
    };
}
/**
 * Class for generating embeddings using the Nomic API.
 */
export declare class NomicEmbeddings extends Embeddings implements NomicEmbeddingsParams {
    modelName: string;
    model: string;
    taskType: EmbeddingTaskType;
    batchSize: number;
    stripNewLines: boolean;
    client: AtlasUser;
    dimensionality?: number;
    get lc_secrets(): {
        [key: string]: string;
    } | undefined;
    constructor(fields?: Partial<NomicEmbeddingsParams>);
    /**
     * Method to generate embeddings for an array of documents. Splits the
     * documents into batches and makes requests to the Nomic API to generate
     * embeddings.
     * @param {Array<string>} texts Array of documents to generate embeddings for.
     * @returns {Promise<number[][]>} Promise that resolves to a 2D array of embeddings for each document.
     */
    embedDocuments(texts: string[]): Promise<number[][]>;
    /**
     * Method to generate an embedding for a single document. Calls the
     * embeddingWithRetry method with the document as the input.
     * @param {string} text Document to generate an embedding for.
     * @returns {Promise<number[]>} Promise that resolves to an embedding for the document.
     */
    embedQuery(text: string): Promise<number[]>;
    /**
     * Private method to make a request to the Nomic API to generate
     * embeddings. Handles the retry logic and returns the response from the
     * API.
     * @param {string | Array<string>} input Text to send to the Nomic API.
     * @returns {Promise<NomicEmbeddingsResult>} Promise that resolves to the response from the API.
     */
    private embeddingWithRetry;
}
