import { getEnvironmentVariable } from "@langchain/core/utils/env";
import { Embeddings } from "@langchain/core/embeddings";
import { chunkArray } from "@langchain/core/utils/chunk_array";
import { AtlasUser } from "@nomic-ai/atlas";
/**
 * Class for generating embeddings using the Nomic API.
 */
export class NomicEmbeddings extends Embeddings {
    get lc_secrets() {
        return {
            promptLayerApiKey: "NOMIC_API_KEY",
        };
    }
    constructor(fields) {
        super(fields ?? {});
        Object.defineProperty(this, "modelName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "nomic-embed-text-v1"
        });
        Object.defineProperty(this, "model", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "nomic-embed-text-v1"
        });
        Object.defineProperty(this, "taskType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "search_document"
        });
        Object.defineProperty(this, "batchSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 400
        });
        Object.defineProperty(this, "stripNewLines", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "dimensionality", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        const apiKey = fields?.apiKey ?? getEnvironmentVariable("NOMIC_API_KEY");
        if (!apiKey) {
            throw new Error("NOMIC_API_KEY is required.");
        }
        this.client = new AtlasUser({ apiKey });
        this.modelName = fields?.model ?? fields?.modelName ?? this.model;
        this.model = this.modelName;
        this.taskType = fields?.taskType ?? this.taskType;
        this.batchSize = fields?.batchSize ?? this.batchSize;
        this.stripNewLines = fields?.stripNewLines ?? this.stripNewLines;
        this.dimensionality = fields?.dimensionality;
    }
    /**
     * Method to generate embeddings for an array of documents. Splits the
     * documents into batches and makes requests to the Nomic API to generate
     * embeddings.
     * @param {Array<string>} texts Array of documents to generate embeddings for.
     * @returns {Promise<number[][]>} Promise that resolves to a 2D array of embeddings for each document.
     */
    async embedDocuments(texts) {
        const batches = chunkArray(this.stripNewLines ? texts.map((t) => t.replace(/\n/g, " ")) : texts, this.batchSize);
        const batchRequests = batches.map((batch) => this.embeddingWithRetry(batch));
        const batchResponses = await Promise.all(batchRequests);
        const embeddings = batchResponses
            .map(({ embeddings }) => embeddings)
            .flat();
        return embeddings;
    }
    /**
     * Method to generate an embedding for a single document. Calls the
     * embeddingWithRetry method with the document as the input.
     * @param {string} text Document to generate an embedding for.
     * @returns {Promise<number[]>} Promise that resolves to an embedding for the document.
     */
    async embedQuery(text) {
        const { embeddings } = await this.embeddingWithRetry(this.stripNewLines ? text.replace(/\n/g, " ") : text);
        return embeddings[0];
    }
    /**
     * Private method to make a request to the Nomic API to generate
     * embeddings. Handles the retry logic and returns the response from the
     * API.
     * @param {string | Array<string>} input Text to send to the Nomic API.
     * @returns {Promise<NomicEmbeddingsResult>} Promise that resolves to the response from the API.
     */
    async embeddingWithRetry(input) {
        return this.caller.call(async () => {
            const result = await this.client.apiCall(`/v1/embedding/text`, "POST", {
                model: this.model,
                texts: Array.isArray(input) ? input : [input],
                task_type: this.taskType,
                dimensionality: this.dimensionality,
            });
            return result;
        });
    }
}
