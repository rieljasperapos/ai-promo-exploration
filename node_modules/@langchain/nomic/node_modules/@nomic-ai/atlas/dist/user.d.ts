import { AtlasOrganization, OrganizationProjectInfo } from './organization.js';
import { Table } from 'apache-arrow';
export declare class APIError extends Error {
    status: number;
    statusText: string;
    headers: any;
    responseBody: string | null;
    constructor(status: number, statusText: string, headers: any, responseBody?: string);
}
export type ApiCallOptions = {
    octetStreamAsUint8?: boolean;
};
export declare function get_env_user(): AtlasUser;
type UUID = string;
type OrganizationUserInfo = {
    organization_id: UUID;
    nickname: string;
    user_id: string;
    access_role: 'OWNER' | 'MEMBER';
};
export type UserInfo = {
    sub: string;
    nickname: string;
    name: string;
    picture: string;
    updated_at: string;
    default_organization?: UUID;
    organizations: OrganizationUserInfo[];
};
type Envlogin = {
    useEnvToken: true;
    apiLocation?: never;
    apiKey?: never;
    bearerToken?: never;
};
type ApiKeyLogin = {
    useEnvToken?: never;
    apiLocation?: string;
    apiKey: string;
    bearerToken?: never;
};
type BearerTokenLogin = {
    useEnvToken?: never;
    bearerToken: string;
    apiLocation?: string;
    apiKey?: never;
};
type AnonUser = {
    useEnvToken?: never;
    bearerToken?: never;
    apiLocation?: string;
    apiKey?: never;
};
export declare class AtlasUser {
    private credentials;
    anonymous: boolean;
    apiLocation: string;
    _info: Promise<UserInfo> | undefined;
    /**
     *
     * @param params
     *  An object that corresponds to one of the accepted login methods
     *    Envlogin: Uses the environment variable
     *      must have `useEnvToken: true`
     *    ApiKeyLogin: Uses an api key
     *      must have `apiKey: string`
     *    BearerTokenLogin: Uses a bearer token
     *      must have `bearerToken: string`
     *    AnonUser: No credentials, used for anonymous users
     *
     */
    constructor(params: Envlogin);
    constructor(params: ApiKeyLogin);
    constructor(params: BearerTokenLogin);
    constructor(params: AnonUser);
    /**
     *
     * @returns All projects that the user has access to.
     */
    projects(): Promise<OrganizationProjectInfo[]>;
    /**
     *
     * @param role return only organizations where the user has this role (default: null, return all organizations)
     * @returns A list of organizations where the user has the specified role
     */
    organizations(role?: 'OWNER' | 'MEMBER' | null): Promise<AtlasOrganization[]>;
    info(): Promise<UserInfo>;
    /**
     * Call the API and return the results as deserialized JSON
     * or Arrow.
     *
     * @param endpoint The nomic API endpoint to call. If it doesn't begin with a slash, it will be added.
     * @param method POST or GET
     * @param payload The binary or JSON payload sent with the request.
     * @param headers Additional headers to send with the request
     * @returns
     */
    apiCall(endpoint: string, method?: 'GET' | 'POST', payload?: Atlas.Payload, headers?: null | Record<string, string>, options?: ApiCallOptions): Promise<Record<string, any> | string | Array<any> | Table | Uint8Array>;
}
export {};
