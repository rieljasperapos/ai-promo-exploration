import type { Schema, Table } from 'apache-arrow';
import type { ApiCallOptions } from './user.js';
import { AtlasUser } from './user.js';
import { AtlasIndex } from './index.js';
import { BaseAtlasClass } from './general.js';
type UUID = string;
export declare function load_project(options: Atlas.LoadProjectOptions): AtlasProject;
type IndexCreateOptions = {
    project_id: UUID;
    index_name: string;
    indexed_field?: string;
    colorable_fields?: string[];
    multilingual?: boolean;
    build_topic_model?: boolean;
    topic_label_field?: string;
    duplicate_detection?: boolean;
};
/**
 * An AtlasProject represents a single mutable dataset in Atlas. It provides an
 * interfaces to upload, update, and delete data, as well as create and delete
 * indices which handle specific views.
 */
export declare class AtlasProject extends BaseAtlasClass {
    _indices: AtlasIndex[];
    _schema?: Schema | null;
    private _info?;
    id: UUID;
    /**
     *
     * @param id The project's unique UUID. To create a new project or fetch
     * an existing project, use the create_project or load_project functions.
     * @param user An existing AtlasUser object. If not provided, a new one will be created.
     *
     * @returns An AtlasProject object.
     */
    constructor(id: UUID | string, user?: AtlasUser);
    projectionSummaries(): Promise<Atlas.ProjectionInfo[]>;
    apiCall(endpoint: string, method: 'GET' | 'POST', payload?: Atlas.Payload, headers?: null | Record<string, string>, options?: ApiCallOptions): Promise<string | any[] | Record<string, any> | Uint8Array | Table<any>>;
    delete(): Promise<string | any[] | Record<string, any> | Uint8Array | Table<any>>;
    private clear;
    wait_for_lock(): Promise<void>;
    project_info(): void;
    info(): Promise<Atlas.ProjectInfo>;
    _fixEndpointURL(endpoint: string): Promise<string>;
    indices(): Promise<AtlasIndex[]>;
    /**
     * Updates all indices associated with a project.
     *
     * @param rebuild_topic_models If true, rebuilds topic models for all indices.
     */
    update_indices(rebuild_topic_models?: boolean): Promise<void>;
    add_text(records: Record<string, string>[]): Promise<void>;
    add_embeddings(): Promise<void>;
    /**
     *
     * @param ids A list of identifiers to fetch from the server.
     */
    fetch_ids(ids?: string[]): Promise<Record<string, any>[]>;
    createIndex(options: Omit<IndexCreateOptions, 'project_id'>): Promise<AtlasIndex>;
    delete_data(ids: string[]): Promise<void>;
    validate_metadata(): void;
    get schema(): Schema<any> | null | undefined;
    uploadArrow(table: Table | Uint8Array): Promise<void>;
}
export {};
